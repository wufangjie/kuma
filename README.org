#+AUTHOR: wfj
#+EMAIL: wufangjie1223@126.com
#+HTML_HEAD_EXTRA: <style type="text/css"> body {padding-left: 21%;} #table-of-contents {position: fixed; width: 20%; height: 100%; top: 0; left: 0; overflow-x: hidden; overflow-y: scroll;} </style>
#+OPTIONS: ^:{} \n:t email:t
* Features
** Usage
1. Search the web
2. Run applications (or activate/close application window)
3. Open file with default application
4. Eval one line python code (advanced calculator)
5. Your imagination
NOTE: use space to seperate keyword and parameter

** Tricks
1. Space is not supposed to occur in keyword, indeed I use it to recognize keyword, but you can use it for completion (for commonly used command)
2. You can use "keyword new" to force kuma open a new application (if the command do) rather activate some window, "close" or "kill" to close
3. When the popup have too many rows (> 2), try to press <Control-l>, see section "Emacs keybinding" below for detail

** Completion
1. Keyword completion and path completion
2. Path completion should start with ~/ or /, NOTE: Windows should do it too
3. Short keywords are too hard to remember, I think the whole word plus completion is better
4. I think less used applications need not to be added to keyword's completions

** Emacs keybinding and custom workflow
See below

** Shortages
1. First time adding commonly used apps is painful
2. Only implement exact prefix matching

* Requirement
Pure python implemention, python3 (with tkinter) is required
** Linux
1. python3-xlib is required, which may have been already installed by default
2. xprop command line tool, which may have been already installed by default
NOTE: xprop is included in x11-utils on ubuntu 18.04

** Windows
win32api

NOTE: pip install may raise ImportError, please download exe from the following url:

https://sourceforge.net/projects/pywin32/files/pywin32/

* Startup
** Linux
I think it's just a piece of cake for linux guys

For me, xfce4-session-settings -> Application Autostart -> then add command: python3 {absolute path}/travel_for_linux.py

** Windows
Run travel_for_windows.pyw and then you can call kuma every time you press your global HOTKEY, which defined in travel_for_windows.pyw, default is <Control-;>

http://www.intowindows.com/how-to-add-apps-to-startup-in-windows-10/

** Async
If you killed kuma by accident or kuma crashed, you can run travel_async_but_risky.py to restart kuma asynchronously
NOTE: TODO: FIXME: not for windows yet, double click file may be your best way

* About config.org
Emacs's org-mode is good at table and rectangle operations, recommend to you

config.org's format is strict unless you implement it yourself:
0. First Line:    [Keyword, Type, Description, Pattern, Platform, Command]
1. "Keyword":     must be unique in certain platform
2. "Type":        must in {Web, App, Py}
3. "Description": do not remove it even if it is empty
4. "Pattern":     you can write a regular expression to match window's appname or title better, '' means use keyword instead
5. "Platform":    must in {'', Windows, Linux, Darwin} or '{}+{}' form, '' means available on all platforms
6. "Command":     Web command can have at most one parameter, App command will run as flat shell command + your additional parameter, Py for humanity

* Emacs keybinding
** Tab
1. Complete
2. Insert (if only one completion)
3. Insert longest common prefix
4. Greedy tail match completion (see travel.py insert_one_greedy function)

** Enter
1. Run command
2. Select completion
3. If command is not a path, not in keywords and is a prefix of some keywords, then complete
4. Run user-defined callback

** Useful shortcuts (change state)
| shortcut | effect                                                       |
|----------+--------------------------------------------------------------|
| Escape   | if popup exist quit it, or quit kuma                         |
| C-g      | if popup exist quit it, or unhighlight input's selection     |
| M-t      | toggle topmost, you may need kuma be in front of some window |

** input entry movement, editing (continuous kill, continuous undo etc.)
| function                | shortcut    |                 |
|-------------------------+-------------+-----------------|
| forward_char            | C-f         |                 |
| backward_char           | C-b         |                 |
| forward_word            | M-f         |                 |
| backward_word           | M-b         |                 |
| move_beginning_of_line  | C-a         |                 |
| move_end_of_line        | C-e         |                 |
| delete_char             | C-d         |                 |
| backward_delete_char    | BackSpace   |                 |
| kill_word               | M-d         |                 |
| backward_kill_word      | M-BackSpace |                 |
| kill_line               | C-k         |                 |
| backward_kill_line      |             |                 |
| set_mark                | C-space     |                 |
| set_mark                | C-@         | for Windows     |
| exchange_point_and_mark | C-x         | emacs's C-x C-x |
| select_all              |             |                 |
| select_all_and_cut      | M-h         |                 |
| copy                    | M-w         |                 |
| cut                     | C-w         |                 |
| paste                   | C-y         |                 |
| undo                    | C-/         |                 |
| transpose_chars         | C-t         |                 |

** popup data movement
| function           | shortcut |
|--------------------+----------+
| next_page          | M-]      |
| previous_page      | M-[      |
| next_row           | C-n      |
| previous_row       | C-p      |
| end_of_data        | M->      |
| beginning_of_data  | M-<      |
| move_to_golden_row | C-l      |

** window movement (24 pixels per press)
| <Right> |
| <Left>  |
| <Down>  |
| <Up>    |

** Control-l (move_to_golden_row)
#+BEGIN_EXAMPLE
if a popup has 9 rows:
    if the highlighted row in the upper half:
        then jump to line 7 (change with the number of rows)
	# NOTE: this will let you go to any row within 3 keystrokes
    else:
        jump to line 3
so do other popup with different number of rows
#+END_EXAMPLE

* About workflow
1. You only need to implement a main function which will be called when you press <Enter> after type in the workflow's name.
2. The main function's returned value will influence the displaying and the <Enter> callback on it, and then the callback's returned value, and so on.
3. All workflow python file should be 'workflow_{}.py'.format(workflow_name)
See base.py and my two simple workflows for more details

* About kuma and travel
From one of the most popular cartoon "One Piece".

Bartholomew Kuma, whose Devil Fruit ability can send people to any place easily, just like the thing I want my script do.
