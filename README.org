* Features
** Usage
Productivity at your Fingertips:
1. search the web
2. run applications
3. open file with deafult application
4. eval one line python code (advanced calculator)
5. your imagination
NOTE: use space to seperate keyword and parameter

** Tricks
1. Space is not supposed to occur in keyword, indeed I use it to recognize keyword, but you can use it for completion (for commonly use command)

** Emacs keybinding
Implement commonly used emacs keybindings, add something I think useful, for example C-l.

*** Tab
1. complete
2. insert (if only one completion)
3. insert longest common prefix
4. greedy tail match completion (see travel.py insert_one_greedy function)

*** Enter
1. run command
2. select completion
3. if command is not a path, not in keywords and is a prefix of some keywords, then complete
4. run user-defined callback

*** Escape
if popup exist quit it, or quit kuma

*** C-g
if popup exist quit it, or unhighlight input's selection

*** toggle topmost
M-t, you may need kuma be in front of some window

*** input entry movement
| function                | shortcut    |                 |
|-------------------------+-------------+-----------------|
| forward_char            | C-f         |                 |
| backward_char           | C-b         |                 |
| forward_word            | M-f         |                 |
| backward_word           | M-b         |                 |
| move_beginning_of_line  | C-a         |                 |
| move_end_of_line        | C-e         |                 |
| delete_char             | C-d         |                 |
| backward_delete_char    | BackSpace   |                 |
| kill_word               | M-d         |                 |
| backward_kill_word      | M-BackSpace |                 |
| kill_line               | C-k         |                 |
| backward_kill_line      |             |                 |
| set_mark                | C-space     |                 |
| set_mark                | C-@         | for Windows     |
| exchange_point_and_mark | C-x         | emacs's C-x C-x |
| select_all              | M-h         |                 |
| copy                    | M-w         |                 |
| cut                     | C-w         |                 |
| paste                   | C-y         |                 |
| undo                    | C-/         |                 |
| transpose_chars         | C-t         |                 |

*** popup data movement
| function           | shortcut |         |
|--------------------+----------+---------|
| next_page          | M-]      | <Right> |
| previous_page      | M-[      | <Left>  |
| next_row           | C-n      | <Down>  |
| previous_row       | C-p      | <Up>    |
| end_of_data        | M->      |         |
| beginning_of_data  | M-<      |         |
| move_to_golden_row | C-l      |         |

NOTE for move_to_golden_row (recommend):
#+BEGIN_EXAMPLE
if a popup has 9 rows:
    if the highlighted row in the upper half:
        then jump to line 7 will let you go to any row within 3 keystokes
    else:
        jump to line 3
so do other rows popup
#+END_EXAMPLE

** Completion
1. Keyword completion and path completion
2. path completion should start with ~/ or /, NOTE: Windows should too
3. short keywords are too hard to remember, I think whole word plus completion is better
4. think less used applications need not to add to keyword's completions

** Cross platform
Standing on the shoulder of python, I just did a few things, and more testing are waiting for me.

* Shortages
1. First time adding commonly used apps is painful
2. Only implement exact prefix matching

* Requirement
1. Pure python implemention, only python3 (with tkinter) is required
2. For windows user, win32api is required for a faster response
   NOTE: pip install raise ImportError, download exe from the following url:
   https://sourceforge.net/projects/pywin32/files/pywin32/

* Set startup shortcut
** Linux
Just bind keyboard short cut to command: python3 the_path/kuma/travel.py
TODO: It may be a bit slow without a ssd, grab_key is too hard to use for me

** Windows
Run travel_windows.py and you can call kuma every time you press your global HOTKEY, (default is Control-;)
# desktop shortcut way is too slow

* About config.org
Emacs's org-mode is good at table and rectangle operations, recommend to you\\
config.org's format is strict unless you implement it yourself:
1. Colmuns must be [Keyword, Type, Description, Platform, Command]
2. "Keyword" must be unique in certain platform
3. "Type" must in {Web, App, Py}
4. "Description" do not remove it even if it is empty
6. "Platform" must in {'', Windows, Linux, Darwin} or '{}+{}' form, '' means available on all platforms
7. "Command": Web command can have at most one params, App command will run as flat shell command + your additional param, Py see following workflow.

* About workflow
You only need to implement a main function which will be called when you press <Enter> after type in the workflow's name. And the main function's returned value will influence displaying and the <Enter> callback on it, and then the callback's returned value...\\
See base.py and my two simple workflows\\
All workflow python file should be 'workflow_{}.py'.format(workflow_name)

* About kuma and travel
From one of the most popular cartoon "One Piece".\\
Bartholomew Kuma, whose Devil Fruit ability can send people to every place easily, just like the thing I want my script do.
